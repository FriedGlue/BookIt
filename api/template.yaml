AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: |
  AWS SAM template to create a Books DynamoDB table, a Go Lambda function, and an API Gateway endpoint for managing books, plus Cognito-based authentication and "UserLists" functionality.

Parameters:
  StageName:
    Type: String
    Default: dev

Globals:
  Function:
    Timeout: 10
    MemorySize: 128

Resources:
  #####################################
  # SNS Topic: "UserEventsTopic"
  #####################################
  UserEventsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub UserEvents-${StageName}

  #####################################
  # API Gateway: "BookItApi"  
  #####################################
  BookItApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub BookItApi-${StageName}
      StageName: !Ref StageName
      Auth:
        DefaultAuthorizer: BookItCognitoAuthorizer
        Authorizers:
          BookItCognitoAuthorizer:
            UserPoolArn: !GetAtt BookItUserPool.Arn
            Identity:
              Header: Authorization

  #####################################
  # Authentication resources
  #####################################

  # Cognito User Pool
  BookItUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub BookItUserPool-${StageName}
      UsernameAttributes:
        - email

  BookItUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref BookItUserPool
      ClientName: !Sub BookItUserPoolClient-${StageName}
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH

  #####################################
  # DynamoDB Table: "BooksTable"  
  #####################################
  BooksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub BookDataTable-${StageName}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: bookId
          AttributeType: S
        - AttributeName: titleLowercase
          AttributeType: S
        - AttributeName: isbn13
          AttributeType: S
      KeySchema:
        - AttributeName: bookId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: TitleIndex
          KeySchema:
            - AttributeName: titleLowercase
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: ISBNIndex
          KeySchema:
            - AttributeName: isbn13
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  #####################################
  # DynamoDB Table: "Profiles"
  #####################################
  ProfilesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ProfilesTable-${StageName}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: _id
          AttributeType: S
      KeySchema:
        - AttributeName: _id
          KeyType: HASH

  #####################################
  # Lambda Function: "Orchestrator"  
  #####################################
  OrchestratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub Orchestrator-${StageName}
      Runtime: provided.al2
      Handler: bootstrap
      CodeUri: cmd/orchestrator/bootstrap
      PackageType: Zip
      Architectures:
        - arm64
      Environment:
        Variables:
          PROFILES_TABLE_NAME: !Ref ProfilesTable
          BOOKS_TABLE_NAME: !Ref BooksTable

      # DynamoDB Policies 
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - dynamodb:Scan
              - dynamodb:BatchGetItem
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:Query
            Resource:
              - !GetAtt BooksTable.Arn
              - !Sub ${BooksTable.Arn}/index/*

        - Statement:
            Effect: Allow
            Action:
              - dynamodb:Scan
              - dynamodb:BatchGetItem
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:Query
            Resource: !GetAtt ProfilesTable.Arn

      Events:

        # Books routes
        BookItApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref BookItApi
            Path: /books
            Method: ANY

        BookItApiEventWithBookId:
          Type: Api
          Properties:
            RestApiId: !Ref BookItApi
            Path: /books/{bookId}
            Method: ANY

        BookItApiEventWithSearch:
          Type: Api
          Properties:
            RestApiId: !Ref BookItApi
            Path: /books/search
            Method: ANY

        # Profile routes
        AnyProfileEvent:
          Type: Api
          Properties:
            Path: /profile
            Method: ANY
            RestApiId: !Ref BookItApi

        # CurrentlyReading routes
        AnyCurrentlyReadingEvent:
          Type: Api
          Properties:
            Path: /currently-reading
            Method: ANY
            RestApiId: !Ref BookItApi

        # CurrentlyReading routes
        CurrentlyReadingStartReadingEvent:
          Type: Api
          Properties:
            Path: /currently-reading/start-reading
            Method: ANY
            RestApiId: !Ref BookItApi

        # CurrentlyReading routes
        CurrentlyReadingFinishReadingEvent:
          Type: Api
          Properties:
            Path: /currently-reading/finish-reading
            Method: ANY
            RestApiId: !Ref BookItApi

        # List routes
        AnyBookshelvesEvent:
          Type: Api
          Properties:
            Path: /bookshelves
            Method: ANY
            RestApiId: !Ref BookItApi

        # ReadingLog routes
        ReadingLogEvent:
          Type: Api
          Properties:
            Path: /reading-log
            Method: ANY
            RestApiId: !Ref BookItApi

        # ReadingChallenges routes
        ReadingChallengesEvent:
          Type: Api
          Properties:
            Path: /challenges
            Method: ANY
            RestApiId: !Ref BookItApi

        # ReadingChallenges routes
        ReadingChallengesEventWithId:
          Type: Api
          Properties:
            Path: /challenges/{id}
            Method: ANY
            RestApiId: !Ref BookItApi

  #####################################
  # Lambda Function: "Authentication"  
  #####################################
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub Auth-${StageName}
      Runtime: provided.al2
      Handler: bootstrap
      CodeUri: cmd/auth/bootstrap
      PackageType: Zip
      Architectures:
        - arm64
      Environment:
        Variables:
          USER_POOL_ID: !Ref BookItUserPool
          USER_POOL_CLIENT_ID: !Ref BookItUserPoolClient
          USER_EVENTS_TOPIC_ARN: !Ref UserEventsTopic
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt UserEventsTopic.TopicName
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:AdminGetUser
            Resource: !GetAtt BookItUserPool.Arn

      # For these auth endpoints, override the default authorizer to "NONE"
      Events:

        SignUpRoute:
          Type: Api
          Properties:
            Path: /auth/signup
            Method: ANY
            RestApiId: !Ref BookItApi
            Auth:
              Authorizer: NONE

        ConfirmRoute:
          Type: Api
          Properties:
            Path: /auth/confirm
            Method: ANY
            RestApiId: !Ref BookItApi
            Auth:
              Authorizer: NONE

        SignInRoute:
          Type: Api
          Properties:
            Path: /auth/signin
            Method: ANY
            RestApiId: !Ref BookItApi
            Auth:
              Authorizer: NONE

        SignOutRoute:
          Type: Api
          Properties:
            Path: /auth/signout
            Method: ANY
            RestApiId: !Ref BookItApi

        RefreshRoute:
          Type: Api
          Properties:
            Path: /auth/refresh
            Method: ANY
            RestApiId: !Ref BookItApi
            Auth:
              Authorizer: NONE

  #####################################
  # Lambda Function: "ProfileCreator"
  #####################################
  ProfileCreatorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ProfileCreator-${StageName}
      Runtime: provided.al2
      Handler: bootstrap
      CodeUri: cmd/profile-creator/bootstrap
      PackageType: Zip
      Architectures:
        - arm64
      Environment:
        Variables:
          PROFILES_TABLE_NAME: !Ref ProfilesTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProfilesTable
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref UserEventsTopic

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub https://${BookItApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/books

  BooksTableName:
    Description: Name of the DynamoDB Books table
    Value: !Ref BooksTable

  ProfilesTableName:
    Description: Name of the DynamoDB Profiles table
    Value: !Ref ProfilesTable

  OrchestratorFunctionName:
    Description: Name of the Books Lambda function
    Value: !Ref OrchestratorFunction

  UserPoolID:
    Description: Cognito User Pool ID
    Value: !Ref BookItUserPool

  UserPoolClientID:
    Description: Cognito User Pool Client ID
    Value: !Ref BookItUserPoolClient