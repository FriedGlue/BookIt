AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: >
  AWS SAM template to create a Books DynamoDB table, a Go Lambda function,
  and an API Gateway endpoint for managing books,
  plus Cognito-based authentication and "UserLists" functionality.

Globals:
  Function:
    Timeout: 10         
    MemorySize: 128     

Resources:
  #####################################
  # API Gateway: "BookitApi"  
  #####################################
  BookitApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: BookitApi
      StageName: dev
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt MyUserPool.Arn
            Identity:
              Header: Authorization


  #####################################
  # Authentication resources
  #####################################

  # Cognito User Pool
  MyUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: MyUserPool
      UsernameAttributes: ["email"]

  MyUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref MyUserPool
      ClientName: MyUserPoolClient
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH

  #####################################
  # DynamoDB Table: "BooksTable"  
  #####################################
  BooksTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: BooksTable
      PrimaryKey:
        Name: bookId 
        Type: String 
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  #####################################
  # DynamoDB Table: "Profiles"
  #####################################
  ProfilesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Profiles
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: _id
          AttributeType: S
      KeySchema:
        - AttributeName: _id
          KeyType: HASH

  #####################################
  # Lambda Function: "MainOrchestrator"  
  #####################################
  OrchestratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: MainOrchestrator 
      Runtime: provided.al2
      Handler: bootstrap
      CodeUri: cmd/orchestrator/bootstrap
      PackageType: Zip
      Architectures: [arm64]
      Environment:
        Variables:
          PROFILES_TABLE_NAME: !Ref ProfilesTable
          BOOKS_TABLE_NAME: !Ref BooksTable

      # DynamoDB Policies 
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - dynamodb:Scan
              - dynamodb:BatchGetItem
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:Query
            Resource: !GetAtt BooksTable.Arn

        - Statement:
            Effect: Allow
            Action:
              - dynamodb:Scan
              - dynamodb:BatchGetItem
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:Query
            Resource: !GetAtt ProfilesTable.Arn

      Events:

        # Books routes
        BookitApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref BookitApi
            Path: /books
            Method: ANY

        BookitApiEventWithISBN:
          Type: Api
          Properties:
            RestApiId: !Ref BookitApi
            Path: /books/{isbn}
            Method: ANY

        # Profile routes
        AnyProfileEventTest:
          Type: Api
          Properties:
            Path: /profile
            Method: ANY
            RestApiId: !Ref BookitApi  

        # CurrentlyReading routes
        AnyCurrentlyReadingEventTest:
          Type: Api
          Properties:
            Path: /currently-reading
            Method: ANY
            RestApiId: !Ref BookitApi  

        # CurrentlyReading routes
        CurrentlyReadingStartReadingEventTest:
          Type: Api
          Properties:
            Path: /currently-reading/start-reading
            Method: ANY
            RestApiId: !Ref BookitApi  

        # CurrentlyReading routes
        CurrentlyReadingFinishReadingEventTest:
          Type: Api
          Properties:
            Path: /currently-reading/finish-reading
            Method: ANY
            RestApiId: !Ref BookitApi  

        # List routes
        AnyListEventTest:
          Type: Api
          Properties:
            Path: /list
            Method: ANY
            RestApiId: !Ref BookitApi  


  #####################################
  # Lambda Function: "Authentication"  
  #####################################
  AuthenticationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Authentication 
      Runtime: provided.al2
      Handler: bootstrap
      CodeUri: cmd/auth/bootstrap
      PackageType: Zip
      Architectures: [arm64]
      Environment:
        Variables:
          USER_POOL_ID: !Ref MyUserPool
          USER_POOL_CLIENT_ID: !Ref MyUserPoolClient

      # For these auth endpoints, override the default authorizer to "NONE"
      Events:
        PreflightSignUpRoute:
          Type: Api
          Properties:
            Path: /auth/signup
            Method: OPTIONS
            RestApiId: !Ref BookitApi
            Auth:
              Authorizer: NONE

        SignUpRoute:
          Type: Api
          Properties:
            Path: /auth/signup
            Method: POST
            RestApiId: !Ref BookitApi
            Auth:
              Authorizer: NONE   

        PreflightConfirmRoute:
          Type: Api
          Properties:
            Path: /auth/confirm
            Method: OPTIONS
            RestApiId: !Ref BookitApi
            Auth:
              Authorizer: NONE

        ConfirmRoute:
          Type: Api
          Properties:
            Path: /auth/confirm
            Method: POST
            RestApiId: !Ref BookitApi
            Auth:
              Authorizer: NONE   

        SignInRoute:
          Type: Api
          Properties:
            Path: /auth/signin
            Method: POST
            RestApiId: !Ref BookitApi
            Auth:
              Authorizer: NONE   
Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${BookitApi}.execute-api.${AWS::Region}.amazonaws.com/dev/books"

  BooksTableName:
    Description: "Name of the DynamoDB Books table"
    Value: !Ref BooksTable
    
  ProfilesTableName:
    Description: "Name of the DynamoDB Profiles table"
    Value: !Ref BooksTable

  OrchestratorFunctionName:
    Description: "Name of the Books Lambda function"
    Value: !Ref OrchestratorFunction

  UserPoolID:
    Description: "Cognito User Pool ID"
    Value: !Ref MyUserPool

  UserPoolClientID:
    Description: "Cognito User Pool Client ID"
    Value: !Ref MyUserPoolClient
